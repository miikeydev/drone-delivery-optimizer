===================================================================
GENETIC ALGORITHM FITNESS FUNCTION SPECIFICATION
===================================================================

Date de création: [Current Date]
Dernière modification: [Current Date]
Fichier source: public/js/GA.js - méthode evaluateFitness()

===================================================================
1. OBJECTIF DE LA FONCTION FITNESS
===================================================================

La fonction de fitness évalue la qualité d'un itinéraire de drone pour 
livraison en tenant compte de:
- Consommation de batterie selon la charge transportée
- Respect des contraintes de mission (pickup → delivery)
- Optimisation de la longueur du parcours

Note: Les effets du vent sont déjà intégrés dans les coûts des arêtes du graphe.

Plus la valeur de fitness est FAIBLE, meilleur est l'itinéraire.

===================================================================
2. FORMULE DE CONSOMMATION DE BATTERIE
===================================================================

Pour chaque déplacement entre deux nœuds i et j:

    battery_cost = (distance * (1 + alpha * payload)) / k_norm

Où:
- distance: distance euclidienne entre les nœuds (en km)
- payload: charge transportée (0 avant pickup, maxPayload après pickup, 0 après delivery)
- alpha = 0.4 (coefficient de surcharge par défaut)
- k_norm = 1.2 (facteur de normalisation par défaut)

===================================================================
3. FONCTION FITNESS COMPLÈTE
===================================================================

fitness = cost_total + penalties

Avec:

3.1. COÛT TOTAL (cost_total):
    cost_total = Σ(battery_cost_i) + length_penalty

    - battery_cost_i: coût batterie calculé selon formule ci-dessus
    - length_penalty = route_length * 2 (pénalité pour routes longues)

3.2. PÉNALITÉS (penalties) - RENFORCÉES:
    - MISSION_FAILURE_PENALTY = 50000 (si pickup non fait)
    - MISSION_FAILURE_PENALTY = 50000 (si delivery non fait)
    - MISSION_FAILURE_PENALTY / 2 = 25000 (si pickup après delivery)
    - INVALID_ROUTE_PENALTY = 10000 (si route structurellement invalide)
    - BATTERY_PENALTY = 1000 * |battery_negative| (si batterie < 0)

===================================================================
4. CONTRAINTES DE VALIDITÉ
===================================================================

Un itinéraire est considéré VALIDE si:
- Contient au moins 4 nœuds (hub → pickup → delivery → hub)
- Pickup apparaît avant delivery dans la séquence
- Batterie finale ≥ 0
- Pickup et delivery sont effectués
- TOUS les déplacements consécutifs suivent des arêtes existantes du graphe

Note importante: L'algorithme génère uniquement des routes qui suivent
les connexions du graphe k-nearest neighbors. Aucun "vol direct" entre
nœuds non-connectés n'est autorisé.

===================================================================
5. MÉCANISME DE RECHARGE
===================================================================

Aux stations de recharge (type 'charging'):
- Recharge automatique de +30% de batterie
- Plafonné à battery_capacity (100% par défaut)
- Appliqué immédiatement à l'arrivée sur la station

===================================================================
6. PARAMÈTRES CONFIGURABLES
===================================================================

Dans GA_CONFIG (public/js/GA.js):

BATTERY_PENALTY = 1000              // Pénalité par unité de batterie négative
INVALID_ROUTE_PENALTY = 10000       // Pénalité pour route invalide (AUGMENTÉ)
MISSION_FAILURE_PENALTY = 50000     // Pénalité très élevée pour échec de mission (NOUVEAU)
K_NORM = 1.2                        // Facteur de normalisation batterie
ALPHA = 0.4                         // Coefficient surcharge payload
MAX_ROUTE_LENGTH = 20               // Longueur max d'une route

===================================================================
7. EXEMPLE DE CALCUL
===================================================================

Route: Hub1 → Charging1 → Pickup1 → Delivery1 → Hub2
Battery: 100% → 85% → 80% → 50% → 40%
Payload: 0kg → 0kg → 3kg → 0kg → 0kg

Calculs:
- Hub1→Charging1: battery_cost = (15km * (1 + 0.4*0)) / 1.2 = 12.5%
- Charging1→Pickup1: battery_cost = (6km * (1 + 0.4*0)) / 1.2 = 5%
- Pickup1→Delivery1: battery_cost = (25km * (1 + 0.4*3)) / 1.2 = 41.7%
- Delivery1→Hub2: battery_cost = (12km * (1 + 0.4*0)) / 1.2 = 10%

Fitness totale = Σ(battery_costs) + length_penalty + penalties
               = 69.2 + (5*2) + 0 = 79.2

===================================================================
8. NOTES POUR MODIFICATIONS
===================================================================

Pour modifier la fonction fitness:
1. Modifier les constantes dans GA_CONFIG
2. Ajuster la formule dans calculateBatteryCost()
3. Modifier les pénalités dans evaluateFitness()
4. Mettre à jour cette documentation

Points d'amélioration possibles:
- Pénalité progressive pour battery faible (au lieu de seuil 0)
- Bonus pour utilisation stations de recharge
- Facteur météo plus complexe (température, pluie)
- Pénalité temps de vol total
- Optimisation multi-objectifs (temps vs énergie vs coût)
- Amélioration de la génération de routes pour éviter les impasses

CORRECTIONS APPORTÉES:
- Route generation now ensures graph connectivity
- Crossover maintains valid paths through the graph
- Mutation operations preserve graph connectivity
- Added pathfinding to connect mandatory waypoints
- FIXED: Hub selection now chooses closest hubs to pickup/delivery points
- FIXED: Path from delivery to end hub now follows graph edges properly
- Enhanced step-by-step pathfinding when direct paths fail
- NOUVELLE CORRECTION: Route generation utilise findChargingStationBetween() pour forcer le passage par les stations de recharge
- NOUVELLE CORRECTION: buildCompleteValidRoute() garantit que toutes les connexions suivent le graphe
- NOUVELLE CORRECTION: Mutations améliorées pour maintenir la connectivité tout en ajoutant des détours par les stations de recharge
- NOUVELLE CORRECTION: Pénalités drastiquement augmentées pour forcer passage par pickup/delivery
- NOUVELLE CORRECTION: Vérification stricte de présence des points obligatoires dans la route
- NOUVELLE CORRECTION: Réparation automatique des routes manquant pickup/delivery
- NOUVELLE CORRECTION: Pénalité pour ordre incorrect (pickup après delivery)
- NOUVELLE CORRECTION: Logs détaillés pour debug des échecs de mission

AMÉLIORATIONS RÉCENTES:
- selectClosestHub(): Choisit le hub le plus proche du point cible
- Chemins delivery→hub: Suivent maintenant la connectivité du graphe
- Évite les routes en "ligne droite" non-autorisées
- Meilleure gestion des impasses avec fallback step-by-step
- buildCompleteValidRoute(): Construction de routes complètes respectant la connectivité
- findChargingStationBetween(): Trouve des stations de recharge intermédiaires viables
- insertValidChargingDetour(): Mutations qui ajoutent des détours par les stations de recharge
- rebuildSegment(): Reconstruction de segments de route avec de meilleurs chemins

===================================================================
FIN DU DOCUMENT
===================================================================
